Create database business_Operation

Use business_Operation

select * from Business_Operations_Dataset

--Analysis Questions:

-- Employee Performance:

--1) Which department had the highest average profit margin among its products?

SELECT TOP 1 
	department, AVG(profit_margin) AS Highest_Avg_Profit_Margin
FROM 
	Business_Operations_Dataset
GROUP BY 
	department
ORDER BY 
	Highest_Avg_Profit_Margin DESC;

--2) Which employee in the IT department had the highest performance score and what was their role?

SELECT TOP 1 
	employee_id, employee_name, employee_role, employee_performance_score 
FROM 
	Business_Operations_Dataset
WHERE 
	department = 'IT'
ORDER BY 
	employee_performance_score DESC;

--Product Sales & Customer Satisfaction:

-- Identify the product with the highest revenue generated in the HR department.

SELECT TOP 1
	product_id, product_name, department, revenue AS Highest_Revenue
FROM 
	Business_Operations_Dataset
WHERE 
	department = 'HR'
ORDER BY 
	revenue DESC;
	
-- What is the average customer feedback score for products in the
--Accessories category, and which product received the highest score?

SELECT 
    (SELECT AVG(customer_feedback_score) 
FROM 
	Business_Operations_Dataset 
WHERE 
	category = 'Accessories') AS Avg_Feedback_Score,product_id, product_name,
	customer_feedback_score AS Highest_Feedback_Score
FROM
	Business_Operations_Dataset
WHERE 
	category = 'Accessories'
ORDER BY 
	customer_feedback_score DESC;

--Supply Chain & Inventory Management:

--1) Which supplier had the highest total inventory level across all departments?

Select top 1
	supplier_id, supplier_name, SUM(inventory_level) AS Total_Inventory
FROM 
	Business_Operations_Dataset
GROUP BY 
	supplier_id, supplier_name
ORDER BY
	Total_Inventory DESC;

--2) Which product in the Gadgets category had the lowest inventory level?

Select top 1
	product_id,product_name,category, inventory_level 
from 
	Business_Operations_Dataset
where
	category='Gadgets'
Order by
	inventory_level  Asc;

-- Employee Training & Sales:

-- 1) How many employees in the Sales department have completed training programs, 
--and what percentage does this represent of the total employees in that department?

SELECT 
    COUNT(*) AS Trained_Employees, 
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Business_Operations_Dataset
WHERE 
	department = 'Sales')) AS Training_Percentage
FROM 
	Business_Operations_Dataset
WHERE
	department = 'Sales' AND training_program_completed = 1;

--Product Sales Contribution:

--1) What is the total number of units sold for all products in the Marketing department
--and which product contributed the most to this total?

SELECT 
    (SELECT SUM(units_sold) 
FROM 
	Business_Operations_Dataset 
WHERE 
	department = 'Marketing') AS Total_Sales_in_Marketing,product_id,product_name, 
    units_sold AS Top_Contributing_Product_Sales
FROM 
	Business_Operations_Dataset
WHERE 
	department = 'Marketing'
ORDER BY 
	units_sold DESC;

--Advanced SQL Questions

-- 1)  Write a query to rank employees in each department by their revenue generated using a window function.

SELECT 
    employee_id,employee_name, department, revenue, 
    RANK() OVER (PARTITION BY department 
ORDER BY 
	revenue DESC) AS Revenue_Rank
FROM 
	Business_Operations_Dataset;

-- 2)Create a CTE to find the average salary of employees in each department
 --and then select departments where the average salary is above $70,000.

 WITH AvgSalaryCTE AS (
    SELECT 
        department, 
        AVG(salary) AS Avg_Salary
 FROM
	 Business_Operations_Dataset
GROUP BY 
	department)
SELECT 
	department, Avg_Salary
FROM
	AvgSalaryCTE
WHERE 
	Avg_Salary > 70000;

--3) Create a view that shows only the product name, revenue, and profit margin 
-- for products in the Accessories category.

CREATE VIEW Accessories_Products AS
SELECT 
    product_name, revenue, profit_margin
FROM
	Business_Operations_Dataset
WHERE 
	category = 'Accessories';

-- 4) Write a query to create a non-clustered index on the employee_name column to improve query performance.

CREATE NONCLUSTERED INDEX 
	idx_employee_name 
ON 
	Business_Operations_Dataset (employee_name);

-- 5) Create a stored procedure that accepts a department name as a parameter 
--and returns the total revenue generated by that department.

CREATE PROCEDURE GetTotalRevenueByDepartment
    @DepartmentName VARCHAR(100)  -- Input parameter
AS
BEGIN
    SELECT 
        department, 
        SUM(revenue) AS Total_Revenue
FROM 
	Business_Operations_Dataset
WHERE	
	department = @DepartmentName
GROUP BY
	department;
END;

-- 6) Write a trigger that logs changes to the revenue column in a separate table whenever an update occurs.

CREATE TABLE Revenue_Log (
    log_id INT IDENTITY(1,1) PRIMARY KEY,
    product_id INT,
    old_revenue DECIMAL(10,2),
    new_revenue DECIMAL(10,2),
    changed_at DATETIME DEFAULT GETDATE()
	);

-- 7) Create a scalar UDF that calculates the profit from a given product's revenue and profit margin.

CREATE FUNCTION Calculate_Profit (
    @Revenue DECIMAL(10,2), 
    @ProfitMargin DECIMAL(5,2)
)  
RETURNS DECIMAL(10,2)  
AS  
BEGIN  
    RETURN (@Revenue * (@ProfitMargin / 100));  
END;

SELECT dbo.Calculate_Profit(50000, 20) AS Profit;

--8) Provide a query to create a clustered index on the company_id column.

CREATE CLUSTERED INDEX idx_company_id 
ON 
	Business_Operations_Dataset (company_id);